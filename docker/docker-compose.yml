# https://docs.docker.com/compose/environment-variables/
services:
  postgres:
    image: postgres:${POSTGRES_IMAGE_TAG}
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    pids_limit: 100
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    volumes:
      - ${POSTGRES_DATA_PATH}:/var/lib/postgresql/data
    environment:
      # timezone inside container
      - TZ

      # necessary Postgres options/variables
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB

  mattermost:
    depends_on:
      - postgres
    image: mattermost/${MATTERMOST_IMAGE}:${MATTERMOST_IMAGE_TAG}
    restart: unless-stopped
    platform: linux/amd64
    security_opt:
      - no-new-privileges:true
    pids_limit: 200
    read_only: false
    tmpfs:
      - /tmp
    volumes:
      - ${MATTERMOST_CONFIG_PATH}:/mattermost/config:rw
      - ${MATTERMOST_DATA_PATH}:/mattermost/data:rw
      - ${MATTERMOST_LOGS_PATH}:/mattermost/logs:rw
      - ${MATTERMOST_PLUGINS_PATH}:/mattermost/plugins:rw
      - ${MATTERMOST_CLIENT_PLUGINS_PATH}:/mattermost/client/plugins:rw
      - ${MATTERMOST_BLEVE_INDEXES_PATH}:/mattermost/bleve-indexes:rw
      # When you want to use SSO with GitLab, you have to add the cert pki chain of GitLab inside Alpine
      # to avoid Token request failed: certificate signed by unknown authority 
      # (link: https://github.com/mattermost/mattermost-server/issues/13059 and https://github.com/mattermost/docker/issues/34)
      # - ${GITLAB_PKI_CHAIN_PATH}:/etc/ssl/certs/pki_chain.pem:ro
    environment:
      # timezone inside container
      - TZ

      # necessary Mattermost options/variables (see env.example)
      - MM_SQLSETTINGS_DRIVERNAME
      - MM_SQLSETTINGS_DATASOURCE

      # necessary for bleve
      - MM_BLEVESETTINGS_INDEXDIR

      # additional settings
      - MM_SERVICESETTINGS_SITEURL

      - MM_SERVICESETTINGS_ALLOWCORS=true
      - MM_SERVICESETTINGS_ENABLECOMMANDS=true
      - MM_SERVICESETTINGS_ENABLEOUTGOINGWEBHOOKS=false
      - MM_SERVICESETTINGS_ENABLEINCOMINGWEBHOOKS=false
      - MM_SERVICESETTINGS_ENABLEBOTACCOUNTCREATION=true
  tarantool:
    image: tarantool/tarantool:latest
    container_name: tarantool
    restart: unless-stopped
    volumes:
      - ./tarantool_data:/var/lib/tarantool
      - ../my-mattermost-bot/storage:/storage
    ports:
      - "3301:3301"
    command: ["tarantool", "/storage/init.lua"]
  bot:
    build:
      context: ../my-mattermost-bot
      dockerfile: Dockerfile
    image: my-mattermost-bot:latest
    container_name: my-mattermost-bot
    restart: unless-stopped
    depends_on:
      mattermost:
        condition: service_healthy
      tarantool:
        condition: service_started
    volumes:
      - ../my-mattermost-bot/bot.env:/app/bot.env
    environment:
      - BOT_ENV_FILE=/app/bot.env

# If you use rolling image tags and feel lucky watchtower can automatically pull new images and
# instantiate containers from it. https://containrrr.dev/watchtower/
# Please keep in mind watchtower will have access on the docker socket. This can be a security risk.
#
#  watchtower:
#    container_name: watchtower
#    image: containrrr/watchtower:latest
#    restart: unless-stopped
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
